[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "anc-noise-profiling"
version = "1.0.0"
description = "Active Noise Cancellation with Noise Profiling - Extract noise profiles from input audio itself"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Farshad Amiri", email = "farshad.amiri@example.com"}
]
maintainers = [
    {name = "Farshad Amiri", email = "farshad.amiri@example.com"}
]
keywords = [
    "audio",
    "noise-reduction", 
    "noise-cancellation",
    "signal-processing",
    "real-time-audio"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.20.0",
    "soundfile>=0.12.0",
    "sounddevice>=0.4.0",
    "noisereduce>=2.0.0,<3.0.0",
    "matplotlib>=3.5.0",
    "PyYAML>=6.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "types-PyYAML",
    "pre-commit>=2.20.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0"
]
all = [
    "anc-noise-profiling[dev,docs]"
]

[project.urls]
Homepage = "https://github.com/FarshadAmiri/ANC_with_noise_profiling"
Repository = "https://github.com/FarshadAmiri/ANC_with_noise_profiling"
Issues = "https://github.com/FarshadAmiri/ANC_with_noise_profiling/issues"

[project.scripts]
anc-noise-profiling = "anc_noise_profiling.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"anc_noise_profiling" = ["*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["anc_noise_profiling"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]